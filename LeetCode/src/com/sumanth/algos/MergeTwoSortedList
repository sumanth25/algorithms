package com.sumanth.algos;

public class MergeTwoSortedList  {
    /**
     You are given the heads of two sorted linked lists list1 and list2.

     Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

     Return the head of the merged linked list.
     Input: list1 = [1,2,4], list2 = [1,3,4]
     Output: [1,1,2,3,4,4]

     */


    // Definition for singly-linked list.
    public static class ListNode {
        int val;
        ListNode next;
        ListNode() {}
        ListNode(int val) { this.val = val; }
        ListNode(int val, ListNode next) { this.val = val; this.next = next; }
    }

    //Represent the head and tail of the singly linked list
    public ListNode head = null;
    public ListNode tail = null;

    public static void main(String[] args) {
        MergeTwoSortedList listNode1 = new MergeTwoSortedList();
        listNode1.addNode(1);
        listNode1.addNode(2);
        ListNode list1 =  listNode1.addNode(4);

        ListNode head = null;
        ListNode tail = null;
        MergeTwoSortedList listNode2 = new MergeTwoSortedList();
        listNode2.addNode(1);
        listNode2.addNode(3);
        ListNode list2 =  listNode2.addNode(4);


        ListNode result=mergeTwoLists(list1,list2);
        System.out.println("Merged List: "+result);
    }

    // mergeTwoLists
    public static ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        final ListNode result = new ListNode();
        ListNode tail = result;
        while (list1 != null && list2 != null){
            if (list1.val < list2.val){
                tail.next = list1;
                list1 = list1.next;
            } else {
                tail.next = list2;
                list2 = list2.next;
            }
            tail = tail.next;
        }
        tail.next = list1 != null ? list1 : list2;
        return result.next;
    }


    //addNode() will add a new node to the list
    public ListNode addNode(int data) {
        //Create a new node
        ListNode newNode = new ListNode(data);

        //Checks if the list is empty
        if(head == null) {
            //If list is empty, both head and tail will point to new node
            head = newNode;
            tail = newNode;
        }
        else {
            //newNode will be added after tail such that tail's next will point to newNode
            tail.next = newNode;
            //newNode will become new tail of the list
            tail = newNode;
        }
        return head;
    }
}

/*
Complexity Analysis
Time complexity : O(n)
Space complexity : O(n)
 */
